name: CD

on:
  workflow_dispatch:
    inputs:
      version:
        description: "The version to build Zig wheels for, use 'latest' for latest release, 'master' for nightly builds"
        required: true
        default: "latest"
      suffix:
        description: >
          Suffix to append to the version in the wheel filename, i.e., for dev versions and version specifiers
        required: false
        default: ""
      platforms:
        description: >
          Comma-separated values of platforms to build wheels for
        required: false
        default: "x86_64-windows,aarch64-windows,x86-windows,x86_64-macos,aarch64-macos,i386-linux,x86-linux,x86_64-linux,aarch64-linux,armv7a-linux,arm-linux,powerpc64le-linux,s390x-linux,riscv64-linux"
      push_to_pypi:
        description: >
          Whether to push the built wheels to PyPI. Can be 'true' or 'false', defaults to 'false'.
        required: true
        default: "false"

permissions: {}

jobs:
  build_wheels:
    name: Build wheels
    runs-on: ubuntu-latest
    permissions:
      contents: read
    steps:
      - uses: actions/checkout@08c6903cd8c0fde910a37f88322edcfb5dd907a8 # v5.0.0
        with:
          persist-credentials: false
      - uses: actions/setup-python@e797f83bcb11b83ae66e0230d6156d7c80228e7c # v6.0.0
        with:
          python-version: "3.x"

      - uses: astral-sh/setup-uv@557e51de59eb14aaaba2ed9621916900a91d50c6 # v6.6.1

      - name: Build wheels for all requested platforms
        shell: bash
        run: |
          platforms=${{ github.event.inputs.platforms }}
          IFS=',' read -r -a platform_array <<< "$platforms"
          for platform in "${platform_array[@]}"; do
            uv run make_wheels.py \
            --outdir dist/ \
            --version ${{ github.event.inputs.version }} \
            --suffix ${{ github.event.inputs.suffix }} \
            --platform "$platform"
          done

      - name: Upload wheel artifacts
        uses: actions/upload-artifact@50769540e7f4bd5e21e526ee35c689e35e0d6874 # v4.4.0
        with:
          name: zig_wheels
          path: dist/*.whl
          if-no-files-found: error

  deploy_wheels:
    name: Deploy wheels
    needs: [build_wheels]
    if: >-
      github.event.inputs.push_to_pypi == 'true' &&
      github.repository == 'ziglang/zig-pypi'
    environment: pypi
    runs-on: ubuntu-latest
    permissions:
      id-token: write # for OIDC trusted publishing
      attestations: write # for the GitHub Actions Attestations feature
      contents: read
    steps:
      - name: Download all wheel artifacts
        uses: actions/download-artifact@fa0a91b85d4f404e444e00e005971372dc801d16 # v4.1.8
        with:
          path: dist/
          merge-multiple: true

      - name: Sanity check wheel artifacts
        run: ls -R dist/

      - name: Generate artifact attestations
        uses: actions/attest-build-provenance@1c608d11d69870c2092266b3f9a6f3abbf17002c # v1.4.3
        with:
          subject-path: dist/*

      # This will publish the list of wheels inputted to the action to PyPI (set to
      # off, by default).
      # The workflow may be triggered multiple times with the `push_to_pypi` input
      # set to 'true' to publish the wheels for any configurable version (non-dev).
      - name: Publish wheels to PyPI
        uses: pypa/gh-action-pypi-publish@81e9d935c883d0b210363ab89cf05f3894778450 # v1.10.2
        with:
          packages-dir: dist/

  inspect_wheels:
    name: Inspect wheels
    needs: [build_wheels]
    runs-on: ubuntu-latest
    steps:
      - name: Download all built wheel artifacts
        uses: actions/download-artifact@fa0a91b85d4f404e444e00e005971372dc801d16 # v4.1.8
        with:
          path: dist/
          merge-multiple: true

      - name: Inspect wheel artifacts
        shell: bash
        run: |
          echo -e '## A list of built wheels and their SHA-256 checksums \n' >> $GITHUB_STEP_SUMMARY
          echo -e '```\n' >> $GITHUB_STEP_SUMMARY
          for wheel in dist/*.whl; do
            shasum --algorithm 256 "$wheel" >> $GITHUB_STEP_SUMMARY
          done
          echo -e '```\n' >> $GITHUB_STEP_SUMMARY
